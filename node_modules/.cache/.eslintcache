[{"D:\\Web Dev\\Code\\code-editor\\src\\index.js":"1","D:\\Web Dev\\Code\\code-editor\\src\\App.js":"2","D:\\Web Dev\\Code\\code-editor\\src\\reportWebVitals.js":"3","D:\\Web Dev\\Code\\code-editor\\src\\pages\\EditorPage.js":"4","D:\\Web Dev\\Code\\code-editor\\src\\pages\\Home.js":"5","D:\\Web Dev\\Code\\code-editor\\src\\components\\Client.js":"6","D:\\Web Dev\\Code\\code-editor\\src\\components\\Editor.js":"7","D:\\Web Dev\\Code\\code-editor\\src\\socket.js":"8","D:\\Web Dev\\Code\\code-editor\\src\\Actions.js":"9"},{"size":541,"mtime":1685298259605,"results":"10","hashOfConfig":"11"},{"size":938,"mtime":1684942214869,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1684772016459,"results":"13","hashOfConfig":"11"},{"size":4058,"mtime":1685290847726,"results":"14","hashOfConfig":"11"},{"size":2825,"mtime":1685295011888,"results":"15","hashOfConfig":"11"},{"size":312,"mtime":1647632923000,"results":"16","hashOfConfig":"11"},{"size":1914,"mtime":1685290925004,"results":"17","hashOfConfig":"11"},{"size":370,"mtime":1685268962437,"results":"18","hashOfConfig":"11"},{"size":202,"mtime":1647632923000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xb5ka9",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\Web Dev\\Code\\code-editor\\src\\index.js",[],[],"D:\\Web Dev\\Code\\code-editor\\src\\App.js",[],[],[],"D:\\Web Dev\\Code\\code-editor\\src\\reportWebVitals.js",[],[],"D:\\Web Dev\\Code\\code-editor\\src\\pages\\EditorPage.js",["51"],[],"import React, { useState, useRef, useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport ACTIONS from \"../Actions\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { initSocket } from \"../socket\";\nimport {\n  useLocation,\n  useNavigate,\n  Navigate,\n  useParams,\n} from \"react-router-dom\";\n\nconst EditorPage = () => {\n  const socketRef = useRef(null);\n  const reactNavigator = useNavigate();\n  const location = useLocation();\n  const codeRef = useRef(null);\n  const { roomId } = useParams();\n  const [clients, setClients] = useState([\n     \n  ]);\n\n  useEffect(() => {\n    const init = async () => {\n      socketRef.current = await initSocket(); // client connect to server by this function\n      socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\n\n      function handleErrors(e) {\n        console.log(\"socket error\", e);\n        toast.error(\"Socket connection failed, try again later.\");\n        reactNavigator(\"/\");\n      }\n      // used for room id to send\n      socketRef.current.emit(ACTIONS.JOIN, {\n        // emit the join event\n        roomId,\n        username: location.state?.username, // ? if username not given then not give error\n      });\n\n\n\n\n\n // Listening for joined event \n      socketRef.current.on(\n        ACTIONS.JOINED,\n        ({ clients, username, socketId }) => {\n          if (username !== location.state?.username) { // who are started didnt get notify other will get \n            toast.success(`${username} joined the room.`);\n            console.log(`${username} joined`);\n          }\n          setClients(clients); // pushing client  \n          // as the client join we have to sync the previous code \n          socketRef.current.emit(ACTIONS.SYNC_CODE, {\n            code: codeRef.current,\n            socketId,\n          });\n        }\n      );\n \n          // Listening for disconnected\n          socketRef.current.on(\n            ACTIONS.DISCONNECTED,\n            ({ socketId, username }) => {\n                toast.success(`${username} left the room.`);\n                setClients((prev) => { // recieve the previous state \n                    return prev.filter(   // loop through \n                        (client) => client.socketId !== socketId   // remove the disconnected client \n                    );\n                });\n            }\n        );\n\n    };\n    init();\n   \n  //many listener(ex socket.on) are there so we have to remove them \n  return () => {\n    socketRef.current.disconnect();\n    socketRef.current.off(ACTIONS.JOINED); //unsubscribe the event \n    socketRef.current.off(ACTIONS.DISCONNECTED);\n};\n  }, []);\n\n  \n\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId); // inbuit api from browser   \n      toast.success(\"Room ID has been copied to your clipboard\");\n    } catch (err) {\n      toast.error(\"Could not copy the Room ID\");\n      console.error(err);\n    }\n  }\n\n  function leaveRoom() {\n    reactNavigator(\"/\");\n  }\n\n  if (!location.state) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <div className=\"mainWrap\">\n      <div className=\"aside\">\n        <div className=\"asideInner\">\n          <div className=\"logo\">\n            <img className=\"logoImage\" src=\"/code-sync.png\" alt=\"logo\" />\n          </div>\n          <h3>Connected</h3>\n          <div className=\"clientsList\">\n            {clients.map((client) => (\n              <Client key={client.socketId} username={client.username} />\n            ))}\n          </div>\n        </div>\n        <button className=\"btn copyBtn\" onClick={copyRoomId}>\n          Copy ROOM ID\n        </button>\n        <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n          Leave\n        </button>\n      </div>\n      <div className=\"editorWrap\">\n        <Editor\n        socketRef={socketRef}\n        roomId={roomId}\n        onCodeChange={(code) => {\n            codeRef.current = code;\n        }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default EditorPage;\n","D:\\Web Dev\\Code\\code-editor\\src\\pages\\Home.js",["52"],[],"import React, { useState } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport toast from 'react-hot-toast';\nimport { useNavigate } from 'react-router-dom';\n\nconst Home = () => {\n    const navigate = useNavigate();\n\n    const [roomId, setRoomId] = useState('');\n    const [username, setUsername] = useState('');\n    const createNewRoom = (e) => {\n        e.preventDefault();\n        const id = uuidV4();\n        setRoomId(id);\n        toast.success('Created a new room');\n    };\n\n    const joinRoom = () => {\n        if (!roomId || !username) {\n            toast.error('ROOM ID & Username is required');\n            return;\n        }\n\n        // Redirect\n        navigate(`/editor/${roomId}`, {\n            state: {\n                username, // passing username from room page to editor page \n            },\n        });\n    };\n\n    const handleInputEnter = (e) => {\n        if (e.code === 'Enter') {\n            joinRoom();\n        }\n    };\n    return (\n        <div className=\"homePageWrapper\">\n            <div className=\"formWrapper\">\n                <img\n                    className=\"homePageLogo\"\n                    src=\"/code-sync.png\"\n                    alt=\"code-sync-logo\"\n                />\n                <h4 className=\"mainLabel\">Paste invitation ROOM ID</h4>\n                <div className=\"inputGroup\">\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"ROOM ID\"\n                        onChange={(e) => setRoomId(e.target.value)}\n                        value={roomId}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"USERNAME\"\n                        onChange={(e) => setUsername(e.target.value)}\n                        value={username}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <button className=\"btn joinBtn\" onClick={joinRoom}>\n                        Join\n                    </button>\n                    <span className=\"createInfo\">\n                        If you don't have an invite then create &nbsp;\n                        <a\n                            onClick={createNewRoom}\n                            href=\"\"\n                            className=\"createNewBtn\"\n                        >\n                            new room\n                        </a>\n                    </span>\n                </div>\n            </div>\n            <footer>\n                <h4>\n                    {/* Built  💛 &nbsp; by &nbsp;\n                    <a href=\"\">Sankalp Sharma</a> */}\n                </h4>\n            </footer>\n        </div>\n    );\n};\n\nexport default Home;\n","D:\\Web Dev\\Code\\code-editor\\src\\components\\Client.js",[],[],"D:\\Web Dev\\Code\\code-editor\\src\\components\\Editor.js",["53","54","55"],[],"import React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';  \n\nconst Editor = ({socketRef,roomId, onCodeChange}) => {\n    const editorRef = useRef(null);\n    useEffect(()=>{\n       async function init()\n       {\n        editorRef.current =Codemirror.fromTextArea(\n            document.getElementById('realtimeEditor'),\n            {\n                mode: { name: 'javascript', json: true },\n                theme: 'dracula',\n                autoCloseTags: true,\n                autoCloseBrackets: true,\n                lineNumbers: true,\n            }\n        );\n  // when we add delete paste all can be shown in origin we can easily get it \n        editorRef.current.on('change', (instance, changes) => {\n            const { origin } = changes;\n            // console.log(changes);\n            const code = instance.getValue(); //get content of editor \n            onCodeChange(code);\n            if (origin !== 'setValue') {\n                socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                    roomId,\n                    code,\n                });\n            }\n        }); \n\n   \n   \n\n       }\n   init();\n\n    },[]);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n    //unsubscribe the code change function \n        return () => {\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\n        };\n    }, [socketRef.current]);\n\n\n    return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;\n","D:\\Web Dev\\Code\\code-editor\\src\\socket.js",[],[],"D:\\Web Dev\\Code\\code-editor\\src\\Actions.js",[],[],{"ruleId":"56","severity":1,"message":"57","line":85,"column":6,"nodeType":"58","endLine":85,"endColumn":8,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":68,"column":25,"nodeType":"62","endLine":72,"endColumn":26},{"ruleId":"56","severity":1,"message":"63","line":45,"column":7,"nodeType":"58","endLine":45,"endColumn":9,"suggestions":"64"},{"ruleId":"56","severity":1,"message":"65","line":57,"column":23,"nodeType":"66","endLine":57,"endColumn":30},{"ruleId":"56","severity":1,"message":"67","line":59,"column":8,"nodeType":"58","endLine":59,"endColumn":27,"suggestions":"68"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state?.username', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["69"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'onCodeChange', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["70"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["71"],{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [location.state?.username, reactNavigator, roomId]",{"range":"78","text":"79"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"80","text":"81"},"Update the dependencies array to be: [socketRef]",{"range":"82","text":"83"},[2704,2706],"[location.state?.username, reactNavigator, roomId]",[1402,1404],"[onCodeChange, roomId, socketRef]",[1809,1828],"[socketRef]"]